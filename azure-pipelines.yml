trigger:
  paths:
    include:
      - apps/*/**

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: dockerRegistry
    type: string
    default: 'ghcr.io/sandeepjnv13'

variables:
  - group: secrets
  - name: githubRegistry
    value: ${{ parameters.dockerRegistry }}

stages:
  - stage: DetectChangedApps
    displayName: 'Changed Apps'
    jobs:
      - job: detect
        steps:
          - checkout: self
          - script: |
              echo "Detecting changed apps..."
              folders=$(git diff --name-only origin/main...HEAD | grep '^apps/' | cut -d '/' -f2 | sort -u | uniq)
              echo "Changed apps: $folders"

              json="["
              for f in $folders; do
                json="$json\"$f\","
              done
              json="${json%,}]"
              
              echo "Detected JSON array: $json"
              echo "##vso[task.setvariable variable=changedApps;isOutput=true]$json"
            name: detectStep
            displayName: 'Extract Changed App Folders as JSON Array'

  - stage: BuildTestPublish
    dependsOn: DetectChangedApps
    displayName: 'Build, Test, Publish Apps'
    condition: succeeded()
    jobs:
      - job: matrixJob
        displayName: 'Apps Matrix'
        strategy:
          matrix: $[ fromJson(dependencies.DetectChangedApps.outputs['detect.detectStep.changedApps']) ]
        steps:
          - checkout: self

          - task: Maven@3
            displayName: 'ðŸ”¨ Build $(System.JobDisplayName)'
            inputs:
              mavenPomFile: 'apps/$(System.JobDisplayName)/pom.xml'
              goals: 'clean package'
              options: '-DskipTests'

          - script: echo "âœ… Tests passed for $(System.JobDisplayName)"
            displayName: 'âœ… Run Tests (Placeholder)'

          - script: |
              echo "$GH_TOKEN" | docker login ghcr.io -u sandeepjnv13 --password-stdin
            env:
              GH_TOKEN: $(GITHUB_TOKEN)
            displayName: 'Login to GitHub Container Registry'

          - script: |
              docker build -t $(githubRegistry)/$(System.JobDisplayName):$(Build.BuildId) -f apps/$(System.JobDisplayName)/Dockerfile apps/$(System.JobDisplayName)
              docker push $(githubRegistry)/$(System.JobDisplayName):$(Build.BuildId)

              docker tag $(githubRegistry)/$(System.JobDisplayName):$(Build.BuildId) $(githubRegistry)/$(System.JobDisplayName):latest
              docker push $(githubRegistry)/$(System.JobDisplayName):latest
            displayName: 'ðŸ“¦ Build and Push Docker Image'
